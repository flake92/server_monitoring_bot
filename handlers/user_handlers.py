import re
from datetime import datetime
from enum import Enum
from typing import Dict

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from config.config import Config
from database.db_manager import DBManager
from utils.logger import setup_logger

# region Constants
class UserState(Enum):
    ADD_SERVER = "add_server"
    DELETE_USER = "delete_user"

EMOJI = {
    "SUCCESS": "‚úÖ",
    "ERROR": "‚ùå",
    "PENDING": "‚è≥",
    "LOCKED": "üîí",
    "BACK": "üîô",
    "ONLINE": "üü¢",
    "OFFLINE": "üî¥",
    "SETTINGS": "‚öôÔ∏è",
    "HELP": "üìö",
    "LIST": "üìù",
    "EMPTY": "üì≠",
    "STATS": "üìä",
    "GLOBE": "üåê",
    "BIN": "üóë",
    "WAVE": "üëã",
    "UNLOCK": "üîì",
    "WARNING": "‚ö†Ô∏è",
    "DENIED": "üö´"
}
# endregion

router = Router()
logger = setup_logger(__name__)
expected_id_input: Dict[str, UserState] = {}
expected_server_edit: Dict[str, int] = {}


# Keyboard builders
def get_main_menu() -> ReplyKeyboardMarkup:
    """Build and return the main menu keyboard markup.
    
    Returns:
        ReplyKeyboardMarkup: The main menu keyboard with common actions
    """
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã")
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    builder.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã")
    builder.button(text="–ü–æ–º–æ—â—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_admin_menu() -> ReplyKeyboardMarkup:
    """Build and return the admin menu keyboard markup.
    
    Returns:
        ReplyKeyboardMarkup: The admin menu keyboard with administrative actions
    """
    builder = ReplyKeyboardBuilder()
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    builder.button(text="–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    builder.button(text="–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# Helper functions
def is_valid_server_address(address: str) -> bool:
    pattern = r"^[\w.-]+(?::\d+)?$"
    return bool(re.match(pattern, address))


def is_admin(user_id: int) -> bool:
    config = Config()
    return user_id in config.admin_ids


def validate_port(port: str) -> bool:
    try:
        port_num = int(port)
        return 1 <= port_num <= 65535
    except ValueError:
        return False


def parse_server_address(address: str) -> tuple[str, int]:
    """Parse server address string into host and port.
    
    Args:
        address (str): Server address in format 'host:port' or just 'host'
        
    Returns:
        tuple[str, int]: Tuple containing host and port
        
    Raises:
        ValueError: If port is invalid
    """
    if ":" in address:
        host, port = address.rsplit(":", 1)
        if not validate_port(port):
            raise ValueError("Invalid port")
        return host, int(port)
    return address, 80  # Default to port 80 if not specified


# Command handlers
@router.message(Command("start"))
async def start_command(message: Message):
    logger.info(f"Received /start from user {message.from_user.id}")
    try:
        config = Config()
        db = DBManager()
        user_id = message.from_user.id
        username = message.from_user.username or "unknown"
        admin_ids = [id.strip() for id in config.admin_ids.split(",") if id.strip()] if config.admin_ids else []
        is_admin_user = str(user_id) in admin_ids

        user = await db.get_user(user_id)
        if not user:
            status = "approved" if is_admin_user else "pending"
            await db.add_user(user_id, username, status)
            if is_admin_user:
                await message.reply(f"{EMOJI['WAVE']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=get_main_menu())
            else:
                if admin_ids:
                    for admin_id in admin_ids:
                        await message.bot.send_message(admin_id, f"{EMOJI['LIST']} –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: @{username} (ID: {user_id})")
                await message.reply(f"{EMOJI['SUCCESS']} –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ")
            return

        status = user.get("status")
        if status == "pending" and is_admin_user:
            await db.update_user_status(user_id, "approved")
            await message.reply(f"{EMOJI['UNLOCK']} –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu())
        elif status == "pending":
            await message.reply(f"{EMOJI['PENDING']} –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        elif status == "approved":
            await message.reply(f"{EMOJI['WAVE']} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("help"))
async def help_command(message: Message):
    logger.info(f"Received /help from user {message.from_user.id}")
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/add_server - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä\n"
        "/list_servers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "/check_servers - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )
    await message.reply(help_text)


@router.message(Command("admin"))
async def admin_command(message: Message):
    logger.info(f"Received /admin from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply(f"{EMOJI['DENIED']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        await message.reply(f"{EMOJI['SETTINGS']} –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_menu())
    except Exception as e:
        logger.error(f"Error in admin_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("add_server"))
async def add_server_command(message: Message):
    logger.info(f"Received /add_server from user {message.from_user.id}")
    try:
        db = DBManager()
        user = await db.get_user(message.from_user.id)

        if not user or not user["is_approved"]:
            await message.reply(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è."
            )
            return

        keyboard = ReplyKeyboardBuilder()
        keyboard.button(text="–ù–∞–∑–∞–¥")
        keyboard.adjust(1)

        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: example.com –∏–ª–∏ example.com:80",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        expected_id_input[str(message.from_user.id)] = UserState.ADD_SERVER
    except Exception as e:
        logger.error(f"Error in add_server_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/add_server - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä\n"
        "/list_servers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "/edit_server - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "/delete_server - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "/check_servers - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"
    )
    await message.reply(help_text)


@router.message(Command("admin"))
async def handle_admin_menu(message: Message):
    """Handle admin menu commands.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /admin from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        keyboard = get_admin_menu()
        await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in handle_admin_menu: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("debug_notify"))
async def debug_notify_command(message: Message):
    """Handle debug notify command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /debug_notify from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        await message.reply(f"{EMOJI['SUCCESS']} –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error in debug_notify_command: {e}")
        await message.reply(f"{EMOJI['ERROR']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.message(Command("list_pending_users"))
async def list_pending_users_command(message: Message):
    """Handle list pending users command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /list_pending_users from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        db = DBManager()
        pending_users = await db.get_pending_users()

        if not pending_users:
            await message.reply(f"{EMOJI['EMPTY']} –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫")
            return

        users_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏:\n\n"
        for user in pending_users:
            users_text += (
                f"ID: {user.id}\n"
                f"–ò–º—è: {user.username}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}\n"
                "---\n"
            )

        await message.reply(users_text)
    except Exception as e:
        logger.error(f"Error in list_pending_users_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    finally:
        db.close()


@router.message(Command("delete_user"))
async def delete_user_command(message: Message):
    """Handle delete user command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /delete_user from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        expected_id_input[str(message.from_user.id)] = UserState.DELETE_USER
    except Exception as e:
        logger.error(f"Error in delete_user_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.message(Command("approve_user"))
async def approve_user_command(message: Message):
    """Handle approve user command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /approve_user from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:")
        expected_id_input[str(message.from_user.id)] = "approve_user"
    except Exception as e:
        logger.error(f"Error in approve_user_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("resend_notification"))
async def resend_notification_command(message: Message):
    """Handle resend notification command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /resend_notification from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        db = DBManager()
        pending_users = await db.get_pending_users()

        if not pending_users:
            await message.reply(f"{EMOJI['EMPTY']} –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫")
            return
            await message.reply(response, reply_markup=get_admin_menu())
        db.close()
    except Exception as e:
        logger.error(f"Error in list_pending_users_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_admin_menu())


@router.message(Command("delete_user"))
async def delete_user_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.info(f"Received /delete_user from user {message.from_user.id}")
    try:
        expected_id_input[str(message.from_user.id)] = UserState.DELETE_USER
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
        )
    except Exception as e:
        logger.error(f"Error in delete_user_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())


@router.message(F.text)
async def process_delete_user_id(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"Processing delete user ID from user {message.from_user.id}: {message.text}")
    user_id_str = str(message.from_user.id)

    if message.text == "–ù–∞–∑–∞–¥":
        expected_id_input.pop(user_id_str, None)
        await message.reply("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        return

    try:
        if user_id_str not in expected_id_input or expected_id_input[user_id_str] != UserState.DELETE_USER:
            return

        config = Config()
        admin_ids = (
            [id.strip() for id in config.admin_ids.split(",") if id.strip()]
            if config.admin_ids
            else []
        )
        logger.info(f"Parsed admin_ids for delete_user: {admin_ids}")

        if not admin_ids:
            logger.error("No admin IDs configured in ADMIN_IDS")
            await message.reply("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        if user_id_str not in admin_ids:
            logger.warning(f"Access denied for user {message.from_user.id}")
            await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        try:
            user_id = int(message.text.strip())
        except ValueError:
            await message.reply("–ò–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        db = DBManager()
        user = await db.get_user(user_id)

        if user is None:
            await message.reply(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu()
            )
            return

        await db.delete_user(user_id)
        await message.reply(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω.", reply_markup=get_admin_menu()
        )

        try:
            await message.bot.send_message(
                user_id,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ."
            )
            logger.info(f"Sent rejection notification to user {user_id}")
        except Exception as e:
            logger.error(f"Failed to send rejection notification to user {user_id}: {e}")
            await message.reply(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}"
            )
    except Exception as e:
        logger.error(f"Error in process_delete_user_id: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        db.close()


@router.message(Command("list_servers"))
async def list_servers_command(message: Message):
    """Handle list servers command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /list_servers from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        db = DBManager()
        servers = await db.get_servers()

        if not servers:
            await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç")
            return

        response = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
        for server in servers:
            response += (
                f"ID: {server.id}\n"
                f"–ê–¥—Ä–µ—Å: {server.address}\n"
                f"–ü–æ—Ä—Ç: {server.port}\n"
                f"–°—Ç–∞—Ç—É—Å: {server.status}\n"
                "---\n"
            )

        await message.reply(response)
    except Exception as e:
        logger.error(f"Error in list_servers_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    finally:
        db.close()


@router.message(Command("edit_server"))
async def edit_server_command(message: Message):
    """Handle edit server command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /edit_server from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        expected_server_input[str(message.from_user.id)] = "edit_server"
    except Exception as e:
        logger.error(f"Error in edit_server_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("delete_server"))
async def delete_server_command(message: Message):
    """Handle delete server command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /delete_server from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        await message.reply("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        expected_server_input[str(message.from_user.id)] = "delete_server"
    except Exception as e:
        logger.error(f"Error in delete_server_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("check_servers"))
async def check_servers_command(message: Message):
    """Handle check servers command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /check_servers from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        db = DBManager()
        servers = await db.get_servers()

        if not servers:
            await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç")
            return

        for server in servers:
            try:
                status = await check_server_status(server.address, server.port)
                await db.update_server_status(server.id, status)
                await message.reply(
                    f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ {server.address}:{server.port}: {status}"
                )
            except Exception as e:
                logger.error(f"Error checking server {server.id}: {e}")
                await message.reply(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server.address}:{server.port}: {str(e)}"
                )
    except Exception as e:
        logger.error(f"Error in check_servers_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    finally:
        db.close()


@router.message(F.text)
async def process_server_input(message: Message):
    """Process server input.

    Args:
        message (Message): Message from user
    """
    user_id_str = str(message.from_user.id)
    if user_id_str not in expected_server_input:
        return

    action = expected_server_input[user_id_str]
    del expected_server_input[user_id_str]

    try:
        server_id = int(message.text.strip())
    except ValueError:
        await message.reply(f"{EMOJI['LOCKED']} –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return

    try:
        db = DBManager()
        server = await db.get_server(server_id)

        if server is None:
            await message.reply(
                f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return

        if action == "edit_server":
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP:–ü–æ—Ä—Ç –∏–ª–∏ –î–æ–º–µ–Ω:–ü–æ—Ä—Ç"
            )
            expected_server_edit[user_id_str] = server_id
        elif action == "delete_server":
            await db.delete_server(server_id)
            await message.reply(
                f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} —É–¥–∞–ª—ë–Ω."
            )
    except Exception as e:
        logger.error(f"Error in process_server_input: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(F.text)
async def process_server_edit(message: Message):
    """Process server edit input.

    Args:
        message (Message): Message from user
    """
    user_id_str = str(message.from_user.id)
    if user_id_str not in expected_server_edit:
        return

    server_id = expected_server_edit[user_id_str]
    del expected_server_edit[user_id_str]

    try:
        address = message.text.strip()
        if not is_valid_server_address(address):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç IP:–ü–æ—Ä—Ç –∏–ª–∏ –î–æ–º–µ–Ω:–ü–æ—Ä—Ç")
            return

        host, port = parse_server_address(address)
        if not validate_port(port):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç. –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535")
            return

        db = DBManager()
        await db.update_server(server_id, host, int(port))
        await message.reply(
            f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: {host}:{port}"
        )
    except Exception as e:
        logger.error(f"Error in process_server_edit: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("help"))
async def help_command(message: Message):
    """Handle help command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /help from user {message.from_user.id}")
    try:
        help_text = (
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        )

        if is_admin(message.from_user.id):
            help_text += (
                "\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "/list_pending_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏\n"
                "/approve_user - –û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/delete_user - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/add_server - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
                "/list_servers - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
                "/edit_server - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
                "/delete_server - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
                "/check_servers - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
                "/debug_notify - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            )

        await message.reply(help_text)
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("start"))
async def start_command(message: Message):
    """Handle start command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /start from user {message.from_user.id}")
    try:
        db = DBManager()
        user = await db.get_user(message.from_user.id)

        if user is None:
            username = message.from_user.username or "Unknown"
            await db.add_user(message.from_user.id, username, "pending")
            await message.reply(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            logger.info(f"New user registration: {message.from_user.id} ({username})")
        elif user.status == "pending":
            await message.reply(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        elif user.status == "approved":
            await message.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤!",
                reply_markup=get_main_menu(),
            )
        else:
            await message.reply(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("admin"))
async def admin_command(message: Message):
    """Handle admin command.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Received /admin from user {message.from_user.id}")
    try:
        if not is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_menu())
    except Exception as e:
        logger.error(f"Error in admin_command: {e}")
        await message.reply("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("add_server"))
async def add_server_command(message: Message):
    logger.info(f"Received /add_server from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)

        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        expected_id_input[str(message.from_user.id)] = UserState.ADD_SERVER
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: IP:–ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1:80)",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
        )
        db.close()
    except Exception as e:
        logger.error(f"Error in add_server_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def add_server_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.info(f"Received /add_server from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)

        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        expected_id_input[str(message.from_user.id)] = UserState.ADD_SERVER
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: IP:–ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1:80)",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
        )
        db.close()
    except Exception as e:
        logger.error(f"Error in add_server_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text)
async def text_menu_handler(message: Message):
    logger.info(f"Received text message from user {message.from_user.id}: {message.text}")
    try:
        user_id = str(message.from_user.id)
        text = message.text

        if text == "–ù–∞–∑–∞–¥":
            expected_id_input.pop(user_id, None)
            await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=get_main_menu())
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if user_id in expected_id_input:
            match expected_id_input[user_id]:
                case UserState.ADD_SERVER:
                    await process_add_server(message)
                case UserState.DELETE_USER:
                    await process_delete_user(message)
                case _:
                    logger.warning(f"Unknown state: {expected_id_input[user_id]}")
                    await message.reply(f"{EMOJI['WARNING']} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        host, port = address.split(":")
        try:
            port = int(port)
            if port < 1 or port > 65535:
                raise ValueError()
        except ValueError:
            await message.reply(
                "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535", reply_markup=get_main_menu()
            )
            return

        db = DBManager()
        try:
            server_id = db.add_server(
                user_id=message.from_user.id,
                name=f"Server {host}:{port}",
                address=address,
                check_type="http",
            )
            await message.reply(
                f"–°–µ—Ä–≤–µ—Ä {host}:{port} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {server_id})",
                reply_markup=get_main_menu(),
            )
        except Exception as e:
            logger.error(f"Failed to add server to database: {e}")
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=get_main_menu(),
            )
        finally:
            db.close()
    except Exception as e:
        logger.error(f"Error in process_add_server: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu()
        )


@router.message(Command("list_servers"))
async def list_servers_command(message: Message):
    logger.info(f"Received /list_servers from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)
        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        servers = db.get_user_servers(message.from_user.id)
        if not servers:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=get_main_menu())
        else:
            response = "–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã:\n"
            for server in servers:
                status_emoji = (
                    "üü¢"
                    if server.status == "online"
                    else "üî¥" if server.status == "offline" else "‚ö™Ô∏è"
                )
                response += f"{status_emoji} {server.name} (ID: {server.id})\n"
                response += f"   –ê–¥—Ä–µ—Å: {server.address}\n"
                response += f"   –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n"
                response += f"   –°—Ç–∞—Ç—É—Å: {server.status}\n\n"
            await message.reply(response, reply_markup=get_main_menu())
        db.close()
    except Exception as e:
        logger.error(f"Error in list_servers_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())


@router.message(Command("edit_server"))
async def edit_server_command(message: Message):
    logger.info(f"Received /edit_server from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)
        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        servers = db.get_user_servers(message.from_user.id)
        if not servers:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=get_main_menu())
            db.close()
            return

        response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for server in servers:
            status_emoji = (
                "üü¢" if server.status == "online" else "üî¥" if server.status == "offline" else "‚ö™Ô∏è"
            )
            response += f"{status_emoji} {server.name} (ID: {server.id})\n"
            response += f"   –ê–¥—Ä–µ—Å: {server.address}\n"
            response += f"   –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n\n"

        expected_id_input[message.from_user.id] = "edit_server"
        await message.reply(
            response + "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        db.close()
    except Exception as e:
        logger.error(f"Error in edit_server_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())


@router.message(F.text)
async def process_edit_server(message: Message):
    logger.info(f"Processing edit server data from user {message.from_user.id}")
    try:
        if (
            message.from_user.id not in expected_id_input
            or expected_id_input[message.from_user.id] != "edit_server"
        ):
            return
        del expected_id_input[message.from_user.id]

        try:
            server_id = int(message.text.strip())
        except ValueError:
            await message.reply(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_main_menu()
            )
            return

        db = DBManager()
        try:
            server = next(
                (s for s in db.get_user_servers(message.from_user.id) if s.id == server_id), None
            )
            if server is None:
                await message.reply(
                    f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                    reply_markup=get_main_menu(),
                )
                db.close()
                return

            expected_server_edit[message.from_user.id] = server_id
            await message.reply(
                f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {server.name}\n"
                f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {server.address}\n"
                f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP:–ø–æ—Ä—Ç –∏–ª–∏ –¥–æ–º–µ–Ω:–ø–æ—Ä—Ç\n"
                f"–ü—Ä–∏–º–µ—Ä: 192.168.1.1:80 –∏–ª–∏ example.com:80",
                reply_markup=types.ReplyKeyboardRemove()
            )
            db.close()
        except Exception as e:
            logger.error(f"Failed to get server info: {e}")
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=get_main_menu()
            )
            db.close()
    except Exception as e:
        logger.error(f"Error in process_edit_server: {e}")
        await message.reply(
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )


@router.message(F.text)
async def process_server_edit(message: Message):
    """Process server edit input.

    Args:
        message (Message): Message from user
    """
    logger.info(f"Processing server edit data from user {message.from_user.id}")
    try:
        if message.from_user.id not in expected_server_edit:
            return

        server_id = expected_server_edit[message.from_user.id]
        del expected_server_edit[message.from_user.id]

        address = message.text.strip()
        if not is_valid_server_address(address):
            await message.reply(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç IP:–ü–æ—Ä—Ç –∏–ª–∏ –î–æ–º–µ–Ω:–ü–æ—Ä—Ç",
                reply_markup=get_main_menu()
            )
            return

        host, port = parse_server_address(address)
        if not validate_port(port):
            await message.reply(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç. –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535",
                reply_markup=get_main_menu()
            )
            return

        db = DBManager()
        try:
            await db.update_server(server_id, host, int(port))
            await message.reply(
                f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: {host}:{port}",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logger.error(f"Failed to update server: {e}")
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=get_main_menu()
            )
        finally:
            db.close()
    except Exception as e:
        logger.error(f"Error in process_server_edit: {e}")
        await message.reply(
            "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )


@router.message(Command("delete_server"))
async def delete_server_command(message: Message):
    logger.info(f"Received /delete_server from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)
        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        servers = db.get_user_servers(message.from_user.id)
        if not servers:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=get_main_menu())
            db.close()
            return

        response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for server in servers:
            status_emoji = (
                "üü¢" if server.status == "online" else "üî¥" if server.status == "offline" else "‚ö™Ô∏è"
            )
            response += f"{status_emoji} {server.name} (ID: {server.id})\n"
            response += f"   –ê–¥—Ä–µ—Å: {server.address}\n"
            response += f"   –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n\n"

        expected_id_input[message.from_user.id] = "delete_server"
        await message.reply(
            response + "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove()
        )
        db.close()
    except Exception as e:
        logger.error(f"Error in delete_server_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())


@router.message(F.text)
async def process_delete_server(message: Message):
    logger.info(f"Processing delete server from user {message.from_user.id}")
    try:
        if (
            message.from_user.id not in expected_id_input
            or expected_id_input[message.from_user.id] != "delete_server"
        ):
            return
        del expected_id_input[message.from_user.id]

        try:
            server_id = int(message.text.strip())
        except ValueError:
            await message.reply("–ò–î —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_main_menu())
            return

        db = DBManager()
        try:
            server = next(
                (s for s in db.get_user_servers(message.from_user.id) if s.id == server_id), None
            )
            if server is None:
                await message.reply(
                    f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                    reply_markup=get_main_menu(),
                )
                db.close()
                return

            db.delete_server(server_id)
            await message.reply(
                f"–°–µ—Ä–≤–µ—Ä {server.name} (ID: {server_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
                reply_markup=get_main_menu(),
            )
            db.close()
        except Exception as e:
            logger.error(f"Failed to delete server: {e}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.", reply_markup=get_main_menu())
            db.close()
    except Exception as e:
        logger.error(f"Error in process_delete_server: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu()
        )


@router.message(Command("check_servers"))
async def check_servers_command(message: Message):
    logger.info(f"Received /check_servers from user {message.from_user.id}")
    try:
        db = DBManager()
        user = db.get_user(message.from_user.id)
        if user is None or user.status != "approved":
            await message.reply(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã.", reply_markup=get_main_menu()
            )
            db.close()
            return

        servers = db.get_user_servers(message.from_user.id)
        if not servers:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.", reply_markup=get_main_menu())
            db.close()
            return

        response = "–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã:\n\n"
        for server in servers:
            status_emoji = (
                "üü¢" if server.status == "online" else "üî¥" if server.status == "offline" else "‚ö™Ô∏è"
            )
            response += f"{status_emoji} {server.name} (ID: {server.id})\n"
            response += f"   –ê–¥—Ä–µ—Å: {server.address}\n"
            response += f"   –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n"
            response += f"   –°—Ç–∞—Ç—É—Å: {server.status}\n\n"

        expected_id_input[message.from_user.id] = "check_server"
        await message.reply(
            response + "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=types.ReplyKeyboardRemove()
        )
        db.close()
    except Exception as e:
        logger.error(f"Error in check_servers_command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())


@router.message(F.text)
async def process_check_server(message: Message):
    logger.info(f"Processing server check from user {message.from_user.id}")
    try:
        if (
            message.from_user.id not in expected_id_input
            or expected_id_input[message.from_user.id] != "check_server"
        ):
            return
        del expected_id_input[message.from_user.id]

        try:
            server_id = int(message.text.strip())
        except ValueError:
            await message.reply("–ò–î —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_main_menu())
            return

        db = DBManager()
        try:
            server = next(
                (s for s in db.get_user_servers(message.from_user.id) if s.id == server_id), None
            )
            if server is None:
                await message.reply(
                    f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                    reply_markup=get_main_menu(),
                )
                db.close()
                return

            status_emoji = (
                "üü¢" if server.status == "online" else "üî¥" if server.status == "offline" else "‚ö™Ô∏è"
            )
            await message.reply(
                f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n"
                f"{status_emoji} {server.name} (ID: {server.id})\n"
                f"   –ê–¥—Ä–µ—Å: {server.address}\n"
                f"   –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {server.check_type}\n"
                f"   –°—Ç–∞—Ç—É—Å: {server.status}",
                reply_markup=get_main_menu(),
            )
            db.close()
        except Exception as e:
            logger.error(f"Failed to check server: {e}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.", reply_markup=get_main_menu())
            db.close()
    except Exception as e:
        logger.error(f"Error in process_check_server: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu()
        )


@router.message(F.text)
async def text_menu_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"Received text menu command from user {message.from_user.id}: {message.text}")
    try:
        config = Config()
        admin_ids = (
            [id.strip() for id in config.admin_ids.split(",") if id.strip()]
            if config.admin_ids
            else []
        )
        is_admin = str(message.from_user.id) in admin_ids
        user_id_str = str(message.from_user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö ID –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if is_admin and message.text.strip().isdigit() and user_id_str in expected_id_input:
            await process_delete_user_id(message)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        menu_commands = {
            "–ù–∞–∑–∞–¥": lambda: message.reply(
                "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu()
            ),
            "–ü–æ–º–æ—â—å": help_command,
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": admin_command,
            "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤": list_servers_command,
            "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä": add_server_command,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä": edit_server_command,
            "–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä": delete_server_command,
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã": check_servers_command,
        }

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        admin_commands = {
            "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": list_pending_users_command,
            "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": delete_user_command,
            "–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": approve_user_command,
            "–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ": resend_notification_command,
            "–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": resend_notification_command,
            "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π": debug_notify_command,
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
        if message.text in menu_commands:
            await menu_commands[message.text](message)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if is_admin and message.text in admin_commands:
            await admin_commands[message.text](message)
            return

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await message.reply(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.", reply_markup=get_main_menu()
        )

    except Exception as e:
        logger.error(f"Error in text_menu_handler: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu()
        )
