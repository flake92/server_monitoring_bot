name: Deploy to Debian Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "SSH_PRIVATE_KEY is empty"; exit 1;
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "SERVER_USER is empty"; exit 1;
          fi
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 46928 -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || {
            echo "Failed to scan SSH host key for ${{ secrets.SERVER_IP }} on port 46928"; exit 1;
          }

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "Attempting SSH connection to $SERVER_USER@$SERVER_IP"
          ssh -i ~/.ssh/id_ed25519 -p 46928 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
            set -e
            export SERVER_USER="$SERVER_USER"
            echo "Deploying as user: \$SERVER_USER"
            echo "Home directory: \$HOME"
            echo "User: \$(whoami)"
            echo "Checking Python version"
            python3 --version | grep "3.11" || {
              echo "Python 3.11 is required"; exit 1;
            }
            if [ -z "\$SERVER_USER" ]; then
              echo "SERVER_USER is empty in SSH session"; exit 1;
            fi
            if [ ! -d "/home/$SERVER_USER" ]; then
              echo "Home directory /home/$SERVER_USER does not exist"; exit 1;
            fi
            if [ -d "/home/$SERVER_USER/server_monitoring_bot" ]; then
              echo "Directory /home/$SERVER_USER/server_monitoring_bot exists, removing and re-cloning"
              rm -rf /home/$SERVER_USER/server_monitoring_bot
            fi
            echo "Cloning repository to /home/$SERVER_USER/server_monitoring_bot"
            git clone https://github.com/flake92/server_monitoring_bot.git /home/$SERVER_USER/server_monitoring_bot || {
              echo "Failed to clone repository"; exit 1;
            }
            cd /home/$SERVER_USER/server_monitoring_bot
            echo "Checking repository contents"
            ls -l *.py config/*.py handlers/*.py database/*.py services/*.py utils/*.py || {
              echo "No Python files found in repository"; exit 1;
            }
            sudo chown -R \$SERVER_USER:\$SERVER_USER /home/$SERVER_USER/server_monitoring_bot
            sudo chmod -R u+rwX /home/$SERVER_USER/server_monitoring_bot
            echo "Checking requirements.txt"
            if [ ! -f requirements.txt ]; then
              echo "requirements.txt not found"; exit 1;
            fi
            echo "requirements.txt contents:"
            cat requirements.txt
            echo "Setting up virtual environment"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt || {
              echo "Failed to install requirements"; exit 1;
            }
            echo "Checking dependencies"
            pip show aiogram
            pip show psycopg2-binary
            pip show python-dotenv
            pip show aiohttp
            pip show ping3
            echo "Checking BOT_TOKEN"
            if [ -z "${{ secrets.BOT_TOKEN }}" ]; then
              echo "BOT_TOKEN secret is empty"; exit 1;
            fi
            echo "Checking ADMIN_IDS"
            if [ -z "${{ secrets.ADMIN_IDS }}" ]; then
              echo "ADMIN_IDS secret is empty"; exit 1;
            fi
            echo "Creating .env file"
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
            echo "DB_HOST=localhost" >> .env
            echo "DB_PORT=5432" >> .env
            echo "DB_NAME=server_monitoring" >> .env
            echo "DB_USER=monitor_user" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "ADMIN_IDS=${{ secrets.ADMIN_IDS }}" >> .env
            chmod 600 .env
            echo ".env contents (masked):"
            cat .env | grep -v "BOT_TOKEN=\|DB_PASSWORD=" | sed "s/ADMIN_IDS=.*/ADMIN_IDS=<masked>/" || {
              echo "Failed to read .env"; exit 1;
            }
            echo "Checking ADMIN_IDS in .env"
            grep -q "ADMIN_IDS=" .env || {
              echo "ADMIN_IDS not found in .env"; exit 1;
            }
            echo "Initializing database"
            if [ ! -f "/home/$SERVER_USER/server_monitoring_bot/.db_initialized" ]; then
              if [ ! -f "database/schema.sql" ]; then
                echo "database/schema.sql not found"; exit 1;
              fi
              export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
              psql -U monitor_user -d server_monitoring -h localhost -p 5432 -f database/schema.sql || {
                echo "Failed to initialize database"; exit 1;
              }
              unset PGPASSWORD
              touch /home/$SERVER_USER/server_monitoring_bot/.db_initialized
            fi
            echo "Applying database migrations"
            export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
            psql -U monitor_user -d server_monitoring -h localhost -p 5432 -c "ALTER TABLE servers ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT 'unknown';" || {
              echo "Failed to apply migration for status column"; exit 1;
            }
            psql -U monitor_user -d server_monitoring -h localhost -p 5432 -c "ALTER TABLE servers ADD COLUMN IF NOT EXISTS last_checked TIMESTAMP;" || {
              echo "Failed to apply migration for last_checked column"; exit 1;
            }
            psql -U monitor_user -d server_monitoring -h localhost -p 5432 -c "CREATE TABLE IF NOT EXISTS notification_cooldown (id INTEGER PRIMARY KEY, last_notification TIMESTAMP);" || {
              echo "Failed to apply migration for notification_cooldown table"; exit 1;
            }
            unset PGPASSWORD
            echo "Checking database for pending users"
            export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
            psql -U monitor_user -d server_monitoring -h localhost -p 5432 -c "SELECT user_id, username, status FROM users WHERE status = 'pending';" || {
              echo "Failed to query pending users"; exit 1;
            }
            unset PGPASSWORD
            echo "Checking Python syntax"
            for file in *.py config/*.py handlers/*.py database/*.py services/*.py utils/*.py; do
              if [ -f "\$file" ]; then
                echo "Checking \$file"
                python3 -m py_compile "\$file" || {
                  echo "Syntax error in \$file"; exit 1;
                }
              fi
            done
            echo "Checking handlers directory"
            ls -l handlers/*.py || echo "No handler files found"
            echo "Checking handlers/__init__.py contents"
            cat handlers/__init__.py
            echo "Restarting telegram-bot service"
            sudo systemctl restart telegram-bot
            sudo systemctl status telegram-bot
            echo "Checking bot logs"
            tail -n 50 bot.log || echo "bot.log not found"
          EOF