name: Deploy to Debian Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/ --cov=. --cov-report=term-missing
          else
            echo "No tests directory found, skipping tests"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "SSH_PRIVATE_KEY is empty"; exit 1;
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "SERVER_USER is empty"; exit 1;
          fi
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 46928 -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || {
            echo "Failed to scan SSH host key for ${{ secrets.SERVER_IP }} on port 46928"; exit 1;
          }

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "Attempting SSH connection to $SERVER_USER@$SERVER_IP"
          ssh -i ~/.ssh/id_ed25519 -p 46928 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
            set -e
            export SERVER_USER="$SERVER_USER"
            echo "Deploying as user: \$SERVER_USER"
            echo "Home directory: \$HOME"
            echo "User: \$(whoami)"

            # Проверка версии Python
            echo "Checking Python version"
            python3 --version | grep "3.11" || {
              echo "Python 3.11 is required"; exit 1;
            }

            # Проверка наличия PostgreSQL
            echo "Checking PostgreSQL"
            which psql || {
              echo "PostgreSQL client not found"; exit 1;
            }

            # Проверка systemd
            echo "Checking systemd service"
            if [ ! -f "/etc/systemd/system/telegram-bot.service" ]; then
              echo "Systemd service not found"; exit 1;
            }

            # Создание резервной копии базы данных
            echo "Creating database backup"
            export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
            backup_file="/home/$SERVER_USER/server_monitoring_backup_\$(date +%Y%m%d_%H%M%S).sql"
            pg_dump -U monitor_user -d server_monitoring -h localhost -p 5432 > "\$backup_file" || {
              echo "Failed to create database backup"; exit 1;
            }
            unset PGPASSWORD
            if [ -z "\$SERVER_USER" ]; then
              echo "SERVER_USER is empty in SSH session"; exit 1;
            fi
            if [ ! -d "/home/$SERVER_USER" ]; then
              echo "Home directory /home/$SERVER_USER does not exist"; exit 1;
            fi
            # Клонирование репозитория
            if [ -d "/home/$SERVER_USER/server_monitoring_bot" ]; then
              echo "Directory /home/$SERVER_USER/server_monitoring_bot exists, removing and re-cloning"
              rm -rf /home/$SERVER_USER/server_monitoring_bot
            fi
            echo "Cloning repository to /home/$SERVER_USER/server_monitoring_bot"
            git clone https://github.com/flake92/server_monitoring_bot.git /home/$SERVER_USER/server_monitoring_bot || {
              echo "Failed to clone repository"; exit 1;
            }
            cd /home/$SERVER_USER/server_monitoring_bot

            # Проверка структуры проекта
            echo "Checking project structure"
            for dir in config database handlers services utils tests; do
              if [ ! -d "\$dir" ]; then
                echo "Directory \$dir not found"; exit 1;
              fi
            done

            # Настройка прав доступа
            sudo chown -R \$SERVER_USER:\$SERVER_USER /home/$SERVER_USER/server_monitoring_bot
            sudo chmod -R u+rwX /home/$SERVER_USER/server_monitoring_bot

            # Установка зависимостей
            echo "Setting up virtual environment"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt || {
              echo "Failed to install requirements"; exit 1;
            }

            # Проверка всех зависимостей
            echo "Checking dependencies"
            required_packages=(
              "aiogram==3.3.0"
              "aiogram-dialog==2.1.0"
              "psycopg2-binary==2.9.9"
              "aiohttp==3.9.1"
              "ping3==4.0.3"
              "requests==2.31.0"
              "dnspython==2.4.2"
              "pydantic==2.5.2"
              "python-dotenv==1.0.0"
              "matplotlib==3.8.2"
              "pandas==2.1.4"
            )

            for package in "\${required_packages[@]}"; do
              name=\$(echo \$package | cut -d= -f1)
              version=\$(echo \$package | cut -d= -f2)
              installed_version=\$(pip show \$name | grep Version | cut -d' ' -f2)
              if [ "\$installed_version" != "\$version" ]; then
                echo "Package \$name version mismatch. Expected \$version, got \$installed_version"
                exit 1
              fi
            done
            # Проверка и создание .env файла
            echo "Setting up environment variables"
            required_env_vars=(
              "BOT_TOKEN=${{ secrets.BOT_TOKEN }}"
              "DB_HOST=localhost"
              "DB_PORT=5432"
              "DB_NAME=server_monitoring"
              "DB_USER=monitor_user"
              "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
              "ADMIN_IDS=${{ secrets.ADMIN_IDS }}"
              "NOTIFICATION_INTERVAL=300"
              "LOG_LEVEL=INFO"
            )

            for var in "\${required_env_vars[@]}"; do
              name=\$(echo \$var | cut -d= -f1)
              value=\$(echo \$var | cut -d= -f2)
              if [ -z "\$value" ]; then
                echo "\$name is empty"; exit 1;
              fi
              echo "\$var" >> .env
            done
            chmod 600 .env

            # Инициализация и миграция базы данных
            echo "Database initialization and migration"
            if [ ! -f "database/schema.sql" ]; then
              echo "database/schema.sql not found"; exit 1;
            fi

            export PGPASSWORD="${{ secrets.DB_PASSWORD }}"

            # Проверка существования базы данных
            psql -U monitor_user -h localhost -p 5432 -lqt | cut -d \| -f 1 | grep -qw server_monitoring || {
              echo "Creating database server_monitoring"
              createdb -U monitor_user -h localhost -p 5432 server_monitoring
            }

            # Применение схемы и миграций
            echo "Applying database schema and migrations"
            psql -U monitor_user -d server_monitoring -h localhost -p 5432 -f database/schema.sql

            # Дополнительные миграции
            migrations=(
              "ALTER TABLE servers ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT 'unknown';"
              "ALTER TABLE servers ADD COLUMN IF NOT EXISTS last_checked TIMESTAMP;"
              "ALTER TABLE servers ADD COLUMN IF NOT EXISTS check_interval INTEGER DEFAULT 300;"
              "ALTER TABLE servers ADD COLUMN IF NOT EXISTS notification_enabled BOOLEAN DEFAULT true;"
              "CREATE TABLE IF NOT EXISTS notification_cooldown (id INTEGER PRIMARY KEY, last_notification TIMESTAMP);"
              "CREATE TABLE IF NOT EXISTS server_stats (id SERIAL PRIMARY KEY, server_id INTEGER REFERENCES servers(id), check_time TIMESTAMP, response_time FLOAT, status VARCHAR(50));"
            )

            for migration in "\${migrations[@]}"; do
              echo "Applying migration: \$migration"
              psql -U monitor_user -d server_monitoring -h localhost -p 5432 -c "\$migration" || {
                echo "Failed to apply migration"; exit 1;
              }
            done

            unset PGPASSWORD

            # Проверка синтаксиса Python
            echo "Checking Python syntax"
            find . -type f -name "*.py" ! -path "./venv/*" -exec python3 -m py_compile {} \;

            # Проверка и настройка systemd сервиса
            echo "Setting up systemd service"
            sudo cp systemd/telegram-bot.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable telegram-bot

            # Перезапуск сервиса
            echo "Restarting service"
            sudo systemctl restart telegram-bot
            sleep 5  # Ждем запуска сервиса
            sudo systemctl is-active telegram-bot || {
              echo "Service failed to start"
              sudo journalctl -u telegram-bot -n 50
              exit 1
            }

            # Проверка логов
            echo "Checking logs"
            if [ -f "bot.log" ]; then
              tail -n 50 bot.log
            else
              echo "Warning: bot.log not found"
            fi

            echo "Deployment completed successfully"
          EOF